YXN5bmNhcGk6ICcyLjAuMCcKaW5mbzoKICB0aXRsZTogVGVzdDFDaGFubmVsMgogIHZlcnNpb246ICcxLjAuMCcKICBkZXNjcmlwdGlvbjogfAogICAgVGhlIFNlY29uZCBjaGFubmVsIG9mIHRoZSBmaXJzdCBUZXN0IHdpdGggbW9kZSBkaXJlY3QgPSBwdWJsaXNoCiAgeC1idXNpbmVzcy11bml0OiBhYmNkCgpkZWZhdWx0Q29udGVudFR5cGU6IGFwcGxpY2F0aW9uL2pzb24KCgpzZXJ2ZXJzOgogIHByb2R1Y3Rpb246CiAgICB1cmw6IGxvY2FsaG9zdAogICAgcHJvdG9jb2w6IGFtcXAKICAgIGRlc2NyaXB0aW9uOiBUaGlzIGlzICJNeSBDb21wYW55IiBicm9rZXIuCiAgICBzZWN1cml0eToKICAgICAgLSB1c2VyLXBhc3N3b3JkOiBbXQoKY2hhbm5lbHM6CiAgbXljaGFubmVsMjoKICAgIGRlc2NyaXB0aW9uOiBUaGUgY2hhbm5lbCAyCiAgICBwdWJsaXNoOgogICAgICBzdW1tYXJ5OiBTdW1tYXJ5IG9mIHRoZSBtZXNzYWdlcy4KICAgICAgb3BlcmF0aW9uSWQ6IG15Q2hhbm5lbDJPcGVyYXRpb24KICAgICAgbWVzc2FnZToKICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL21lc3NhZ2VzL21lc3NhZ2UyJwogICAgICB4LXNjcy1ncm91cDogbXlOb3ZhR3JvdXAyCgpjb21wb25lbnRzOgogIG1lc3NhZ2VzOgogICAgbWVzc2FnZTI6CiAgICAgIG5hbWU6IG5hbWVNZXNzYWdlMgogICAgICB0aXRsZTogdGl0bGVNZXNzYWdlMgogICAgICBzdW1tYXJ5OiBJbmZvcm0gYWJvdXQgbWVzc2FnZSAyLgogICAgICBjb250ZW50VHlwZTogYXBwbGljYXRpb24vanNvbgogICAgICBwYXlsb2FkOgogICAgICAgICRyZWY6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy9tZXNzYWdlMlBheWxvYWQiCiAgc2NoZW1hczoKICAgIG1lc3NhZ2UyUGF5bG9hZDoKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgZ2VuZXJpY0RhdGE6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGRlc2NyaXB0aW9uOiBBbnkgZGF0YS4KICAgICAgICBzZW50QXQ6CiAgICAgICAgICAkcmVmOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvc2VudEF0IgogICAgc2VudEF0OgogICAgICB0eXBlOiBzdHJpbmcKICAgICAgZm9ybWF0OiBkYXRlLXRpbWUKICAgICAgZGVzY3JpcHRpb246IERhdGUgYW5kIHRpbWUgd2hlbiB0aGUgbWVzc2FnZSB3YXMgc2VudC4KICBzZWN1cml0eVNjaGVtZXM6CiAgICB1c2VyLXBhc3N3b3JkOgogICAgICB0eXBlOiB1c2VyUGFzc3dvcmQKCg