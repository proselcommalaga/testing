YXN5bmNhcGk6ICcyLjAuMCcKaW5mbzoKICB0aXRsZTogVGVzdDFDaGFubmVsMwogIHZlcnNpb246ICcxLjAuMCcKICBkZXNjcmlwdGlvbjogfAogICAgVGhlIFRoaXJkIGNoYW5uZWwgb2YgdGhlIGZpcnN0IFRlc3Qgd2l0aCBtb2RlIGRpcmVjdCA9IHN1YnNjcmliZQogIHgtYnVzaW5lc3MtdW5pdDogYWJjZAoKZGVmYXVsdENvbnRlbnRUeXBlOiBhcHBsaWNhdGlvbi9qc29uCgpjaGFubmVsczoKICBteWNoYW5uZWwzOgogICAgZGVzY3JpcHRpb246IFRoZSBjaGFubmVsIDMKICAgIHN1YnNjcmliZToKICAgICAgc3VtbWFyeTogU3VtbWFyeSBvZiB0aGUgbWVzc2FnZXMuCiAgICAgIG9wZXJhdGlvbklkOiBteUNoYW5uZWwzT3BlcmF0aW9uCiAgICAgIG1lc3NhZ2U6CiAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9tZXNzYWdlcy9tZXNzYWdlM180JwogICAgICB4LXNjcy1ncm91cDogbXlOb3ZhR3JvdXAKCmNvbXBvbmVudHM6CiAgbWVzc2FnZXM6CiAgICBtZXNzYWdlMToKICAgICAgbmFtZTogbmFtZU1lc3NhZ2UxCiAgICAgIHRpdGxlOiB0aXRsZU1lc3NhZ2UxCiAgICAgIHN1bW1hcnk6IEluZm9ybSBhYm91dCBtZXNzYWdlIDEuCiAgICAgIHBheWxvYWQ6CiAgICAgICAgJHJlZjogIiMvY29tcG9uZW50cy9zY2hlbWFzL21lc3NhZ2UzXzRQYXlsb2FkIgogICAgbWVzc2FnZTNfNDoKICAgICAgbmFtZTogbmFtZU1lc3NhZ2UzXzQKICAgICAgdGl0bGU6IHRpdGxlTWVzc2FnZTNfNAogICAgICBzdW1tYXJ5OiBJbmZvcm0gYWJvdXQgbWVzc2FnZSAzXzQuCiAgICAgIHBheWxvYWQ6CiAgICAgICAgJHJlZjogIiMvY29tcG9uZW50cy9zY2hlbWFzL21lc3NhZ2UzXzRQYXlsb2FkIgogIHNjaGVtYXM6CiAgICBtZXNzYWdlM180UGF5bG9hZDoKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgZ2VuZXJpY0RhdGEzXzQ6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGRlc2NyaXB0aW9uOiBBbnkgbW9yZSBkYXRhLgogICAgICAgIHNlbnRBdDoKICAgICAgICAgICRyZWY6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy9zZW50QXQiCiAgICBzZW50QXQ6CiAgICAgIHR5cGU6IHN0cmluZwogICAgICBmb3JtYXQ6IGRhdGUtdGltZQogICAgICBkZXNjcmlwdGlvbjogRGF0ZSBhbmQgdGltZSB3aGVuIHRoZSBtZXNzYWdlIHdhcyBzZW50Lgo