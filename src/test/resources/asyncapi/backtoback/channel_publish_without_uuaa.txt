YXN5bmNhcGk6ICcyLjAuMCcKaW5mbzoKICB0aXRsZTogdGVzdDFDaGFubmVsMQogIHZlcnNpb246ICcxLjAuMCcKICBkZXNjcmlwdGlvbjogfAogICAgVGhlIEZpcnN0IGNoYW5uZWwgb2YgdGhlIGZpcnN0IFRlc3Qgd2l0aCBtb2RlIGRpcmVjdCA9IHB1Ymxpc2gKCmRlZmF1bHRDb250ZW50VHlwZTogYXBwbGljYXRpb24vanNvbgoKY2hhbm5lbHM6CiAgbXljaGFubmVsMToKICAgIGRlc2NyaXB0aW9uOiBUaGUgY2hhbm5lbCAxCiAgICBwdWJsaXNoOgogICAgICBzdW1tYXJ5OiBTdW1tYXJ5IG9mIHRoZSBtZXNzYWdlcy4KICAgICAgb3BlcmF0aW9uSWQ6IG15Q2hhbm5lbDFPcGVyYXRpb24KICAgICAgbWVzc2FnZToKICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL21lc3NhZ2VzL21lc3NhZ2UxJwogICAgICB4LXNjcy1ncm91cDogbXlOb3ZhR3JvdXAxCgpjb21wb25lbnRzOgogIG1lc3NhZ2VzOgogICAgbWVzc2FnZTE6CiAgICAgIG5hbWU6IG5hbWVNZXNzYWdlMQogICAgICB0aXRsZTogdGl0bGVNZXNzYWdlMQogICAgICBzdW1tYXJ5OiBJbmZvcm0gYWJvdXQgbWVzc2FnZSAxLgogICAgICBjb250ZW50VHlwZTogYXBwbGljYXRpb24vanNvbgogICAgICBwYXlsb2FkOgogICAgICAgICRyZWY6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy9tZXNzYWdlMVBheWxvYWREdG8iCiAgc2NoZW1hczoKICAgIG1lc3NhZ2UxUGF5bG9hZER0bzoKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgbWVhc3VyZToKICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgIG1pbmltdW06IDAKICAgICAgICAgIGRlc2NyaXB0aW9uOiBNZWFzdXJlIG9mIGFueXRoaW5nLgogICAgICAgIHNlbnRBdDoKICAgICAgICAgICRyZWY6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy9zZW50QXREdG8iCiAgICAgICAgZGF0YToKICAgICAgICAgICRyZWY6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy9kYXRhVHlwZUR0byIKICAgIHNlbnRBdER0bzoKICAgICAgdHlwZTogc3RyaW5nCiAgICAgIGZvcm1hdDogZGF0ZS10aW1lCiAgICAgIGRlc2NyaXB0aW9uOiBEYXRlIGFuZCB0aW1lIHdoZW4gdGhlIG1lc3NhZ2Ugd2FzIHNlbnQuCiAgICBkYXRhVHlwZUR0bzoKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgZGF0YTE6CiAgICAgICAgICAkcmVmOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvaW5uZXJEYXRhVHlwZTFEdG8iCiAgICAgICAgZGF0YTI6CiAgICAgICAgICAkcmVmOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvaW5uZXJEYXRhVHlwZTJEdG8iCiAgICAgICAgZGF0YTM6CiAgICAgICAgICAkcmVmOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvaW5uZXJEYXRhVHlwZTNEdG8iCiAgICBpbm5lckRhdGFUeXBlMUR0bzoKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgZW51bTE6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGVudW06IFsKICAgICAgICAgICAgICAiY2x1ZWxlc3MiLAogICAgICAgICAgICAgICJsYXp5IiwKICAgICAgICAgICAgICAiYWR2ZW50dXJvdXMiLAogICAgICAgICAgICAgICJhZ2dyZXNzaXZlIgogICAgICAgICAgXQogICAgICAgIGVudW0yOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBlbnVtOgogICAgICAgICAgICAtIGNsdWVsZXNzMgogICAgICAgICAgICAtIGxhenkyCiAgICAgICAgICAgIC0gYWR2ZW50dXJvdXMyCiAgICAgICAgICAgIC0gYWdncmVzc2l2ZTIKICAgIGlubmVyRGF0YVR5cGUyRHRvOgogICAgICB0eXBlOiBzdHJpbmcKICAgIGlubmVyRGF0YVR5cGUzRHRvOgogICAgICB0eXBlOiBvYmplY3QKICAgICAgcHJvcGVydGllczoKICAgICAgICBjb21wbGV4OgogICAgICAgICAgJHJlZjogIiMvY29tcG9uZW50cy9zY2hlbWFzL2lubmVyQ29tcGxleERhdGFUeXBlMUR0byIKICAgICAgICBzaW1wbGU6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICBteUFycmF5OgogICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAkcmVmOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvYXJyYXkxRHRvIgogICAgICAgIG15RW51bXNBcnJheToKICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgJHJlZjogIiMvY29tcG9uZW50cy9zY2hlbWFzL2lubmVyRGF0YVR5cGUxRHRvIgogICAgaW5uZXJDb21wbGV4RGF0YVR5cGUxRHRvOgogICAgICB0eXBlOiBvYmplY3QKICAgICAgcHJvcGVydGllczoKICAgICAgICBtZWFzdXJlOgogICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgbWluaW11bTogMAogICAgICAgICAgZm9ybWF0OiBpbnQ2NAogICAgICAgICAgZGVzY3JpcHRpb246IE1lYXN1cmUgb2YgYW55dGhpbmcuCiAgICAgICAgc2VudEF0OgogICAgICAgICAgJHJlZjogIiMvY29tcG9uZW50cy9zY2hlbWFzL3NlbnRBdER0byIKICAgIGFycmF5MUR0bzoKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgbXlGbG9hdDoKICAgICAgICAgIHR5cGU6IG51bWJlcgogICAgICAgICAgZm9ybWF0OiBmbG9hdAogICAgICAgIG15RG91YmxlOgogICAgICAgICAgdHlwZTogbnVtYmVyCiAgICAgICAgICBmb3JtYXQ6IGRvdWJsZQogICAgICAgIG15Qm9vbGVhbjoKICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICBteVN0cmluZzoKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIG15RW51bXNBcnJheToKICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgJHJlZjogIiMvY29tcG9uZW50cy9zY2hlbWFzL2lubmVyRGF0YVR5cGUxRHRvIgo