YXN5bmNhcGk6ICcyLjAuMCcKCmRlZmF1bHRDb250ZW50VHlwZTogYXBwbGljYXRpb24vanNvbgoKY2hhbm5lbHM6CiAgbXljaGFubmVsMzoKICAgIGRlc2NyaXB0aW9uOiBUaGUgY2hhbm5lbCAzCiAgICBzdWJzY3JpYmU6CiAgICAgIHN1bW1hcnk6IFN1bW1hcnkgb2YgdGhlIG1lc3NhZ2VzLgogICAgICBvcGVyYXRpb25JZDogbXlDaGFubmVsM09wZXJhdGlvbgogICAgICBtZXNzYWdlOgogICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvbWVzc2FnZXMvbWVzc2FnZTNfNCcKICAgICAgeC1zY3MtZ3JvdXA6IG15Tm92YUdyb3VwCgpjb21wb25lbnRzOgogIG1lc3NhZ2VzOgogICAgbWVzc2FnZTNfNDoKICAgICAgbmFtZTogbmFtZU1lc3NhZ2UzXzQKICAgICAgdGl0bGU6IHRpdGxlTWVzc2FnZTNfNAogICAgICBzdW1tYXJ5OiBJbmZvcm0gYWJvdXQgbWVzc2FnZSAzXzQuCiAgICAgIHBheWxvYWQ6CiAgICAgICAgJHJlZjogIiMvY29tcG9uZW50cy9zY2hlbWFzL21lc3NhZ2UzXzRQYXlsb2FkIgogIHNjaGVtYXM6CiAgICBtZXNzYWdlM180UGF5bG9hZDoKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgZ2VuZXJpY0RhdGEzXzQ6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGRlc2NyaXB0aW9uOiBBbnkgbW9yZSBkYXRhLgogICAgICAgIHNlbnRBdDoKICAgICAgICAgICRyZWY6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy9zZW50QXQiCiAgICBzZW50QXQ6CiAgICAgIHR5cGU6IHN0cmluZwogICAgICBmb3JtYXQ6IGRhdGUtdGltZQogICAgICBkZXNjcmlwdGlvbjogRGF0ZSBhbmQgdGltZSB3aGVuIHRoZSBtZXNzYWdlIHdhcyBzZW50Lgo