YXN5bmNhcGk6ICcyLjAuMCcKaW5mbzoKICB0aXRsZTogdGVzdDFDaGFubmVsMQogIHZlcnNpb246ICcxLjAuMCcKICBkZXNjcmlwdGlvbjogfAogICAgVGhlIEZpcnN0IGNoYW5uZWwgb2YgdGhlIGZpcnN0IFRlc3Qgd2l0aCBtb2RlIGRpcmVjdCA9IHB1Ymxpc2gKICB4LWJ1c2luZXNzLXVuaXQ6IGFiY2QKCmRlZmF1bHRDb250ZW50VHlwZTogYXBwbGljYXRpb24vanNvbgoKY29tcG9uZW50czoKICBzY2hlbWFzOgogICAgbWVzc2FnZTFQYXlsb2FkRHRvOgogICAgICB0eXBlOiBvYmplY3QKICAgICAgcHJvcGVydGllczoKICAgICAgICBtZWFzdXJlOgogICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgbWluaW11bTogMAogICAgICAgICAgZGVzY3JpcHRpb246IE1lYXN1cmUgb2YgYW55dGhpbmcuCiAgICAgICAgc2VudEF0OgogICAgICAgICAgJHJlZjogIiMvY29tcG9uZW50cy9zY2hlbWFzL3NlbnRBdER0byIKICAgICAgICBkYXRhOgogICAgICAgICAgJHJlZjogIiMvY29tcG9uZW50cy9zY2hlbWFzL2RhdGFUeXBlRHRvIgogICAgc2VudEF0RHRvOgogICAgICB0eXBlOiBzdHJpbmcKICAgICAgZm9ybWF0OiBkYXRlLXRpbWUKICAgICAgZGVzY3JpcHRpb246IERhdGUgYW5kIHRpbWUgd2hlbiB0aGUgbWVzc2FnZSB3YXMgc2VudC4KICAgIGRhdGFUeXBlRHRvOgogICAgICB0eXBlOiBvYmplY3QKICAgICAgcHJvcGVydGllczoKICAgICAgICBkYXRhMToKICAgICAgICAgICRyZWY6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy9pbm5lckRhdGFUeXBlMUR0byIKICAgICAgICBkYXRhMjoKICAgICAgICAgICRyZWY6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy9pbm5lckRhdGFUeXBlMkR0byIKICAgICAgICBkYXRhMzoKICAgICAgICAgICRyZWY6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy9pbm5lckRhdGFUeXBlM0R0byIKICAgIGlubmVyRGF0YVR5cGUxRHRvOgogICAgICB0eXBlOiBvYmplY3QKICAgICAgcHJvcGVydGllczoKICAgICAgICBlbnVtMToKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgZW51bTogWwogICAgICAgICAgICAgICJjbHVlbGVzcyIsCiAgICAgICAgICAgICAgImxhenkiLAogICAgICAgICAgICAgICJhZHZlbnR1cm91cyIsCiAgICAgICAgICAgICAgImFnZ3Jlc3NpdmUiCiAgICAgICAgICBdCiAgICAgICAgZW51bTI6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGVudW06CiAgICAgICAgICAgIC0gY2x1ZWxlc3MyCiAgICAgICAgICAgIC0gbGF6eTIKICAgICAgICAgICAgLSBhZHZlbnR1cm91czIKICAgICAgICAgICAgLSBhZ2dyZXNzaXZlMgogICAgaW5uZXJEYXRhVHlwZTJEdG86CiAgICAgIHR5cGU6IHN0cmluZwogICAgaW5uZXJEYXRhVHlwZTNEdG86CiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIGNvbXBsZXg6CiAgICAgICAgICAkcmVmOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvaW5uZXJDb21wbGV4RGF0YVR5cGUxRHRvIgogICAgICAgIHNpbXBsZToKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIG15QXJyYXk6CiAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICRyZWY6ICIjL2NvbXBvbmVudHMvc2NoZW1hcy9hcnJheTFEdG8iCiAgICAgICAgbXlFbnVtc0FycmF5OgogICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAkcmVmOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvaW5uZXJEYXRhVHlwZTFEdG8iCiAgICBpbm5lckNvbXBsZXhEYXRhVHlwZTFEdG86CiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIG1lYXN1cmU6CiAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICBtaW5pbXVtOiAwCiAgICAgICAgICBmb3JtYXQ6IGludDY0CiAgICAgICAgICBkZXNjcmlwdGlvbjogTWVhc3VyZSBvZiBhbnl0aGluZy4KICAgICAgICBzZW50QXQ6CiAgICAgICAgICAkcmVmOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvc2VudEF0RHRvIgogICAgYXJyYXkxRHRvOgogICAgICB0eXBlOiBvYmplY3QKICAgICAgcHJvcGVydGllczoKICAgICAgICBteUZsb2F0OgogICAgICAgICAgdHlwZTogbnVtYmVyCiAgICAgICAgICBmb3JtYXQ6IGZsb2F0CiAgICAgICAgbXlEb3VibGU6CiAgICAgICAgICB0eXBlOiBudW1iZXIKICAgICAgICAgIGZvcm1hdDogZG91YmxlCiAgICAgICAgbXlCb29sZWFuOgogICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgIG15U3RyaW5nOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgbXlFbnVtc0FycmF5OgogICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAkcmVmOiAiIy9jb21wb25lbnRzL3NjaGVtYXMvaW5uZXJEYXRhVHlwZTFEdG8iCg