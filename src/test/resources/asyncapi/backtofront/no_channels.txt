YXN5bmNhcGk6IDIuMC4wCmluZm86CiAgdGl0bGU6IHBvc2ljaW9uR2xvYmFsCiAgdmVyc2lvbjogJzEuMC4wJwogIGRlc2NyaXB0aW9uOiB8CiAgICBNYW5hZ2VzIHVzZXIgYWNjb3VudHMuCiAgeC1idXNpbmVzcy11bml0OiBBQkNECgpjaGFubmVsczoKCmNvbXBvbmVudHM6CiAgbWVzc2FnZXM6CiAgICBtZXNzYWdlVGVzdDoKICAgICAgbmFtZTogbWVzc2FnZVRlc3QKICAgICAgY29udGVudFR5cGU6IGFwcGxpY2F0aW9uL2pzb24KICAgICAgcGF5bG9hZDoKICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvdXNlclNpZ25lZFVwUGF5bG9hZCcKCiAgICBncmVldGluZzoKICAgICAgbmFtZTogZ3JlZXRpbmcKICAgICAgY29udGVudFR5cGU6IGFwcGxpY2F0aW9uL2pzb24KICAgICAgcGF5bG9hZDoKICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvZ3JlZXRpbmdzUGF5bG9hZCcKCiAgc2NoZW1hczoKICAgIHVzZXJTaWduZWRVcFBheWxvYWQ6CiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIGZpcnN0TmFtZToKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIGxhc3ROYW1lOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgZW1haWw6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICBjcmVhdGVkQXQ6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGZvcm1hdDogZGF0ZS10aW1lCgogICAgZ3JlZXRpbmdzUGF5bG9hZDoKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgbWVzc2FnZToKICAgICAgICAgIHR5cGU6IHN0cmluZw