YXN5bmNhcGk6IDIuMC4wCmluZm86CiAgdGl0bGU6IHBvc2ljaW9uR2xvYmFsCiAgdmVyc2lvbjogJzEuMC4wJwogIGRlc2NyaXB0aW9uOiB8CiAgICBNYW5hZ2VzIHVzZXIgYWNjb3VudHMuCiAgeC1idXNpbmVzcy11bml0OiBBQkNECgpjaGFubmVsczoKCiAgL2dyZWV0aW5nczoKICAgIHB1Ymxpc2g6CiAgICAgIG9wZXJhdGlvbklkOiBncmVldGluZ0Jyb2FkY2FzdAogICAgICBtZXNzYWdlOgogICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvbWVzc2FnZXMvbWVzc2FnZVRlc3QnCiAgICBzdWJzY3JpYmU6CiAgICAgIG9wZXJhdGlvbklkOiBoZWxsb2Jyb2FkY2FzdAogICAgICBtZXNzYWdlOgogICAgICAgICRyZWY6ICcjL2NvbXBvbmVudHMvbWVzc2FnZXMvZ3JlZXRpbmcnCgogIC91c2VyR3JlZXRpbmdzOgogICAgeC1icm9hZGNhc3Q6IGZhbHNlCiAgICBwdWJsaXNoOgogICAgICBvcGVyYXRpb25JZDogZ3JlZXRpbmcKICAgICAgbWVzc2FnZToKICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL21lc3NhZ2VzL21lc3NhZ2VUZXN0JwogICAgc3Vic2NyaWJlOgogICAgICBvcGVyYXRpb25JZDogaGVsbG8KICAgICAgbWVzc2FnZToKICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL21lc3NhZ2VzL2dyZWV0aW5nJwoKICAvY2xvY2s6CiAgICBzdWJzY3JpYmU6CiAgICAgIG9wZXJhdGlvbklkOiAgZ2V0Q2xvY2tJbmZvCiAgICAgIG1lc3NhZ2U6CiAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9tZXNzYWdlcy9ncmVldGluZycKCmNvbXBvbmVudHM6CiAgbWVzc2FnZXM6CiAgICBtZXNzYWdlVGVzdDoKICAgICAgbmFtZTogbWVzc2FnZVRlc3QKICAgICAgY29udGVudFR5cGU6IGFwcGxpY2F0aW9uL2pzb24KICAgICAgcGF5bG9hZDoKICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvdXNlclNpZ25lZFVwUGF5bG9hZCcKCiAgICBncmVldGluZzoKICAgICAgbmFtZTogZ3JlZXRpbmcKICAgICAgY29udGVudFR5cGU6IGFwcGxpY2F0aW9uL2pzb24KICAgICAgcGF5bG9hZDoKICAgICAgICAkcmVmOiAnIy9jb21wb25lbnRzL3NjaGVtYXMvZ3JlZXRpbmdzUGF5bG9hZCcKCiAgc2NoZW1hczoKICAgIHVzZXJTaWduZWRVcFBheWxvYWQ6CiAgICAgIHR5cGU6IG9iamVjdAogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIGZpcnN0TmFtZToKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIGxhc3ROYW1lOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgZW1haWw6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICBjcmVhdGVkQXQ6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGZvcm1hdDogZGF0ZS10aW1lCgogICAgZ3JlZXRpbmdzUGF5bG9hZDoKICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgbWVzc2FnZToKICAgICAgICAgIHR5cGU6IHN0cmluZw